import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import pict from './pict/Iphone12.png';
import './Seller.css';
import { useNavigate } from 'react-router-dom';

const Category = ({ categoryName, categoryFilter, category, setCategory }) => {
    const [selected, setSelected] = useState(false);
    const [parent, setParent] = useState([]);
    const [children, setChildren] = useState([]);
  
    const handleToggleSelected = async (e) => {
      e.target.classList.toggle("is_selected");
      const currentlySelected = !selected;
      await setSelected(currentlySelected);
  
      if (categoryFilter && currentlySelected) {
        categoryFilter(categoryName); // Call the categoryFilter function for filtering
      }
  
      if (setCategory) {
        if (currentlySelected) {
          setCategory(categoryName); // Update the category state
        } else {
          setCategory(""); // Reset the category state
        }
      }
  
      if (currentlySelected) {
        try {
          const response = await fetch(
            "http://localhost:8000/fetchParentAndChildren",
            {
              method: "POST",
              headers: {
                "Content-type": "application/json",
              },
              body: JSON.stringify({
                categoryName: categoryName,
              }),
            }
          );
          const result = await response.json();
          setParent(result["parent"]);
          setChildren(result["children"]);
        } catch (error) {
          console.log(error);
        }
      }
    };
  
    return (
      <div>
        <div onClick={handleToggleSelected}>{categoryName}</div>
        {selected && children.length !== 0 && (
          <div>
            {children.map((child, index) => (
              <Category
                key={child + index}
                categoryName={child}
                categoryFilter={categoryFilter}
                category={category}
                setCategory={setCategory}
              />
            ))}
          </div>
        )}
      </div>
    );
  };

export default function Seller () {
    const navigate = useNavigate();
    const [storedEmail, setStoredEmail] = useState('');
    const [products, setProducts] = useState([]);
    const [dups, setDups] = useState([]);
    const [original, setOriginal] = useState([]);
    const [cartList, setCartList] = useState([]);
    // const [dups2, setDups2] = useState([])
    // Initialize the selected value and a function to set the selected value
    const [selectedValue, setSelectedValue] = useState('All');
    const [isVisible, setIsVisible] = useState(true);
    const [sortByPrice, setSortByPrice] = useState(false);
    const [sortByDate, setSortByDate] = useState(false);
    const [searchByName, setSearchByName] = useState('');
    const [TLCsNames, setTLCsNames] = useState([]); //TLC = Top Level Categories

    /* Const for update list */
    const [name, setName] = useState('');
    const [des, setDes] = useState('');
    const [price, setPrice] = useState('');
    const [date, setDate] = useState('');
    const [category, setCategory] = useState('');

    /* Frontend functions */

    const filterPrice = (event) => {
        const isChecked = event.target.checked;
        setSortByPrice(isChecked);
        if (isChecked) {
            const sortedProducts = [...products].sort((a, b) => b.price - a.price);
            setProducts(sortedProducts);
        } else {
            // Return to the original filtered state before sorting
            if (selectedValue === "All") {
                setProducts(original);
            } else {
                const filteredProducts = original.filter((product) => product.category_name === selectedValue);
                setProducts(filteredProducts);
            }
        }
    }

    const filterDate = (event) => {
        const isChecked = event.target.checked;
        setSortByDate(isChecked);
        if (isChecked) {
            const sortedProducts = [...products].sort((a, b) => {
                const [dayA, monthA, yearA] = a.added_date.split('/');
                const [dayB, monthB, yearB] = b.added_date.split('/');
                const dateA = new Date(Number(yearA), Number(monthA) - 1, Number(dayA));
                const dateB = new Date(Number(yearB), Number(monthB) - 1, Number(dayB));
                return dateA - dateB;
            });
            setProducts(sortedProducts);
        } else {
            // Return to the original filtered state before sorting
            if (selectedValue === "All") {
                setProducts(original);
            } else {
                const filteredProducts = original.filter((product) => product.category_name === selectedValue);
                setProducts(filteredProducts);
            }
        }
    }

    const searchName = (event) => {
        setSearchByName(event.target.value);
    }
    const findName = () => {
        if(searchByName === ''){
            setProducts(original)
        } else {
            const findPro = [...original].filter(product => product.name === searchByName);
            setProducts(findPro);
        }
    }

    const label = () => {
        if (isVisible) {
            return(<p>Product:</p>)
        } else {
            return(<p>Cart:</p>)
        }
    }

    const logout = () => {
        localStorage.removeItem('email')
        navigate('/');
    }

    const handleCategoryChange = (categoryName) => {
        // Perform any additional actions with the selected category
        setCategory(categoryName);
    };

    /* Backend data */
    const getSellerData = async () => {
        try {
            const response = await fetch('http://localhost:8000/printSellerData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: storedEmail }),
            });
            const data = await response.json();
            const fetchedProducts= data.result;
            const sellerProducts = fetchedProducts.filter(pro => pro.seller === storedEmail)
            console.log(sellerProducts)
            setProducts(sellerProducts)
            setOriginal(sellerProducts);
            setDups(sellerProducts);
            // setDups2(data);
        } catch (error) {
            console.log(error);
        }
    };

    const getProAfterFiltered = async () => {
        try {
            const response = await fetch('http://localhost:8000/fetchCategories', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ category_name: selectedValue }),
            });
            const data = await response.json();
            const result = data['result']
            setProducts(result.flatMap((array) => array))
        } catch (error) {
            console.error('Error:', error);
        }
    }

    const addItem = async () => {
        try {
            const newItem = {
                name: name,
                price: price,
                seller: storedEmail,
                date_added: date,
                description: des
            };
            // Update the products 
            const response = await fetch('http://localhost:8000/addNewProduct', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({categoryName: category, newItem}),
            });
            const data = await response.json();
                if (response.ok) {
                    alert(data.message); 
                    // Clear the input fields
                    setName("");
                    setDes("");
                    setPrice("");
                    setDate("");
                    setCategory("");
                    getSellerData();
                }
        } catch (error) {
            console.log(error)
        }
    }

    // const addCart = async (name) => {
    //     const itemToCart = products.find(product => product.product_name === name);
    //     const { product_name, category_name, subcategories, price, date_added, seller_email } = itemToCart;
    //     const modifiedItemToCart = { product_name, category_name, subcategories, price, date_added, seller_email, email: storedEmail };
    //     try {
    //         const response = await fetch('http://localhost:8000/addCart', {
    //           method: 'POST',
    //           headers: {
    //             'Content-Type': 'application/json',
    //           },
    //           body: JSON.stringify(modifiedItemToCart),
    //         });
    //         const data = await response.json();
    //         if (response.ok) {
    //           alert(data.message); 
    //         }
    //       } catch (error) {
    //         console.error('Error:', error);
    //       }
    // }

    // const getCart = async () => {
    //     try {
    //         const response = await fetch('http://localhost:8000/printCart',{
    //             method: 'POST',
    //             headers: {'Content-type': 'application/json'},
    //             body: {email:storedEmail}
    //         });
    //         const data = await response.json();

    //         setCartList(data);
    //         console.log(data);
    //     } catch (error) {
    //         console.log(error);
    //     }
    // }

    const deleteItem = async (proName, loginEmail) => {
        try {
            // " ` " not " ' " , there is a difference  =") 
            const response = await fetch(`http://localhost:8000/deleteItem/${proName}/${loginEmail}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const data = await response.json();
            if (response.ok) {
              alert(data.message); 
              getSellerData();
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    const fetchTLCsNames = async() => {
        const response = await fetch('http://localhost:8000/fetchTLCsNames',{
            method: 'GET',  
            headers: { 'Content-type': 'application/json'}
        })

        const result = await response.json()
        const foundTLCs = result['foundTLCsNames']
        setTLCsNames(foundTLCs)
    }

    const handleCategoryFilter = async (categoryName) => {
        try {
            const response = await fetch ('http://localhost:8000/filterProductsByCategory',{
                method: 'POST',
                headers: {'Content-type': 'application/json'},
                body: JSON.stringify({categoryName: categoryName})
            })
            const result = await response.json()
            const productsFilteredByCategory = result['productsFilteredByCategory']
            setProducts(productsFilteredByCategory.filter(pro => pro.seller === storedEmail))
        } catch (error) {
            console.log(error)
        } 
    }

    useEffect(()=>{
        const storedEmail = localStorage.getItem('email');
        setStoredEmail(storedEmail);
        console.log(category)
    },[])

    useEffect(() => {
        getSellerData();
        // getCart();
        fetchTLCsNames()
    }, [storedEmail]);


    useEffect (() => {console.log(category)}, [category])
    return(
        <div>
            <div className='display'>
                {/* Filter options */}
                    <div className='filterFunctions'>
                        <div>
                            <button onClick={() => setProducts(dups)}> Return all </button>
                            {TLCsNames.map((categoryName) => (
                                <Category
                                    key={categoryName}
                                    categoryName={categoryName}
                                    categoryFilter={handleCategoryFilter}
                                />
                            ))}
                        </div>

                        <label>Price</label>
                        <input type="checkbox" checked={sortByPrice} onChange={filterPrice} />
                        <label>Date</label>
                        <input type="checkbox" checked={sortByDate} onChange={filterDate} />
                        <div>
                            <label>Search by name</label>
                            <input type='text' value={searchByName} onChange={searchName} />
                            <button onClick={findName}>Find</button>
                        </div>
                    </div>

                <h1>Your Product:</h1>

                {/* Products list */}
                <div className='tab'>
                    {products.map((pro) => (
                        <div className='info' key={pro.p_id}>
                        <h3>Name: {pro.name}</h3>
                        <p>Description: {pro.description}</p>
                        <p>Price: {pro.price}</p>
                        <p>Date: {pro.added_date}</p>
                        {/* <button onClick={() => addCart(pro.product_name)}>Add to cart</button> */}
                        {/* Render other properties of the product */}
                        </div>
                    ))}
                </div>
            
            </div>
            <div>
                {storedEmail}
            </div>

            <div>
                <Link to='/'>Go to App</Link>
            </div>

            <div className='addItem'>
                <div>
                    <label>Name:</label>
                    <input type='text' value={name} onChange={(e) => setName(e.target.value)}/>
                </div>
                <div>
                    <label>Description:</label>
                    <input type='text' value={des} onChange={(e) => setDes(e.target.value)}/>
                </div>
                <div>
                    <label>Price:</label>
                    <input type='text' value={price} onChange={(e) => setPrice(e.target.value)}/>
                </div>
                <div>
                    <label>Date:</label>
                    <input type='text' value={date} onChange={(e) => setDate(e.target.value)}/>
                </div>
                <div>
                    {TLCsNames.map((categoryName) => (
                        <Category
                            key = {categoryName}
                            categoryName = {categoryName}
                            category={category}
                            setCategory={setCategory}
                        />
                    ))}
                </div>
                <button onClick={addItem}>Add item</button>
            </div>
        </div>
    )
}